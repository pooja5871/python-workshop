{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inside loop\n",
      "Inside loop\n",
      "Inside loop\n",
      "Inside else\n"
     ]
    }
   ],
   "source": [
    "1.\n",
    "counter = 0\n",
    "\n",
    "while counter < 3:\n",
    "    print(\"Inside loop\")\n",
    "    counter = counter + 1\n",
    "else:\n",
    "    print(\"Inside else\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the first 5 even no are:\n",
      "4 6 8 10 12 "
     ]
    }
   ],
   "source": [
    "2.\n",
    "print(\"the first 5 even no are:\")\n",
    "start, end = 4, 13\n",
    "  \n",
    "# iterating each number in list \n",
    "for num in range(start, end + 1): \n",
    "      \n",
    "    # checking condition \n",
    "    if num % 2 == 0: \n",
    "        print(num, end = \" \") \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the first 4 even no are:\n",
      "4 6 8 10 "
     ]
    }
   ],
   "source": [
    "3.\n",
    "print(\"the first 4 even no are:\")\n",
    "start, end = 4, 11\n",
    "  \n",
    "# iterating each number in list \n",
    "for num in range(start, end + 1): \n",
    "      \n",
    "    # checking condition \n",
    "    if num % 2 == 0: \n",
    "        print(num, end = \" \") \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a string: Pooja\n",
      "Length of the input string is: 5\n"
     ]
    }
   ],
   "source": [
    "4.\n",
    "str = input(\"Enter a string: \")\n",
    "\n",
    "counter = 0\n",
    "for s in str:\n",
    "      counter = counter+1\n",
    "print(\"Length of the input string is:\", counter)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the string : Pooja\n",
      "Total Number of Characters in this String =  5\n"
     ]
    }
   ],
   "source": [
    "5.\n",
    "str = input(\"Enter the string : \")\n",
    "total = 0\n",
    " \n",
    "for i in str:\n",
    "    total = total + 1\n",
    " \n",
    "print(\"Total Number of Characters in this String = \", total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the string:opeartor\n",
      "opor\n"
     ]
    }
   ],
   "source": [
    "6.\n",
    "var=input(\"Enter the string:\")\n",
    "ans=var[0:2]+var[-2:]\n",
    "if(len(var)<2):\n",
    "    print(ans)\n",
    "else:\n",
    "    print(ans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the string:Juice\n",
      "Juice\n"
     ]
    }
   ],
   "source": [
    "7.\n",
    "n=input(\"Enter the string:\")\n",
    "firstchar=n[0]\n",
    "newN=n.replace(firstchar,\"$\")\n",
    "print(firstchar+newN[1: ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the string:Pooja\n",
      "Enter the string:Kashyap\n",
      "Kooja Pashyap\n"
     ]
    }
   ],
   "source": [
    "8.\n",
    "x=input(\"Enter the string:\")\n",
    "y=input(\"Enter the string:\")\n",
    "print(y[0:1]+x[1: ], x[0:1]+y[1: ])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

